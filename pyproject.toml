[project]
name = "package_name"
version = "0.1.0"
description = "A reproducible Python project with multi-environment testing"
authors = [{ name = "K1", email = "keven.voyer.1@email.com" }]
requires-python = ">=3.11,<4.0"
dependencies = ["numpy>=2.2.2,<3", "pandas>=2.2.3,<3"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# --- Pixi-specific configurations ---
[tool.pixi.project]
channels = ["nvidia/label/cuda-11.8.0", "nvidia", "conda-forge", "pytorch"]
platforms = ["linux-64"]


# Cross-environment dependencies
[tool.pixi.dependencies]
python = ">=3.11,<4.0" # Base Python constraint
numpy = ">=2.2.2,<3"
pandas = ">=2.2.3,<3"

# Environment definitions for different Python versions
[tool.pixi.environments]
prod = { features = ["prod"], solve-group = "base" }

py311 = { features = ["python311"], solve-group = "base" }
# py312 = { features = ["python312"], solve-group = "base" }
# py313 = { features = ["python313"], solve-group = "base" }
# py314 = { features = ["python314"], solve-group = "base" }
dev = { features = ["dev", "test", "docs"], solve-group = "base" }
docs = { features = ["docs"], solve-group = "base" }
test = { features = ["test"], solve-group = "base" }


# Feature-based configurations

[tool.pixi.feature.python311.dependencies]
python = "3.11.*"

# [tool.pixi.feature.python312.dependencies]
# python = "3.12.*"

# [tool.pixi.feature.python313.dependencies]
# python = "3.13.*"

# [tool.pixi.feature.python314.dependencies]
# python = "3.14.*"


# Optional dependencies groups
[project.optional-dependencies]
test = ["pytest>=8.3.4,<9", "pytest-cov>=6.0.0,<7"]
docs = ["sphinx>=8.1.3,<9", "sphinx-rtd-theme>=3.0.1,<4"]
dev = [
    "ruff>=0.9.4,<0.10",
    "pyright>=1.1.393,<2",
    "vulture>=2.14,<3",
    "ipykernel>=6.29.5,<7",
]

prod = ["gunicorn>=20.1.0", "uvicorn>=0.22.0", "anyio>=3.0"]
# Map optional dependencies to Pixi features :cite[4]:cite[8]
[tool.pixi.feature.test.dependencies]
pytest = ">=8.3.4,<9"
pytest-cov = ">=6.0.0,<7"
hypothesis = ">=6.125.1,<7"

[tool.pixi.feature.docs.dependencies]
sphinx = ">=8.1.3,<9"
sphinx-rtd-theme = ">=3.0.1,<4"
sphinx-autobuild = ">=2024.10.3,<2025"


[tool.pixi.feature.dev.dependencies]
ruff = ">=0.9.4,<0.10"
pyright = ">=1.1.393,<2"
vulture = ">=2.14,<3"
ipykernel = ">=6.29.5,<7"


[tool.pixi.feature.prod.dependencies]
python = "3.11.*"
gunicorn = ">=20.1.0"
uvicorn = ">=0.22.0"
# Add your production-only dependencies here


# --- Linter configurations ---
[tool.ruff]
line-length = 120
target-version = "py311"

include = ["src/**"]
exclude = [
    "**/tests/*",
    "docs/*",
    ".git",
    ".ruff_cache",
    ".pixi",
    "build",
    "dist",
    "typings",
    ".vscode",
]


[tool.ruff.lint]
select = [
    "ALL",
    # "E", "W", "F", # Basic errors/warnings
    # "C","N","Q", # Comment rules
    # "UP",           # Pyupgrade rules
    # "I",            # Isort
    # "C90",          # McCabe complexity
    # "FLY",          # Flynt (string formatting)
    # "ANN",          # Type annotations
    # "RUF",          # Ruff-specific rules
]
ignore = ["D100", "D203", "D213", "COM812"]
unfixable = []

[tool.pyright]
pythonVersion = "3.11"
venv = "dev"
venvPath = ".pixi/envs"
stubPath = "./typings"
typeCheckingMode = "strict"
include = ["src/**"]
exclude = [
    "**/tests/*",
    "docs/*",
    ".git",
    ".ruff_cache",
    ".pixi",
    "build",
    "dist",
    "typings",
    ".vscode",
]

[tool.vulture]
exclude = [
    "**/tests/*",
    "docs/*",
    ".git",
    ".ruff_cache",
    ".pixi",
    "build",
    "dist",
    "typings",
    ".vscode",
]
ignore_decorators = ["@click.command", "@click.group"]
ignore_names = [".*", "_*", "test_*"]
make_whitelist = true
min_confidence = 80
paths = ["src/**"]
sort_by_size = true
# verbose = true
[tool.pixi.tasks]


[tool.pixi.feature.test.tasks]
test = "pytest tests/ --cov=src/package_name"

[tool.pixi.feature.docs.tasks]
docs = "sphinx-apidoc -o docs/source src/package_name/ && sphinx-build docs/source docs/build -b html"
serve-docs = "sphinx-autobuild docs/source docs/build"

[tool.pixi.feature.dev.tasks]
lint = "ruff check . && pyright && vulture ."
format = "ruff format ."                      # New formatting task
typecheck = "pyright src/package_name"
deadcode = "vulture src/package_name"
coverage = "pytest tests/"
# Composite tasks
all-checks = { cmd = "echo 'Running all checks'", depends-on = [
    "lint",
    "test",
    "typecheck",
    "deadcode",
] }

[tool.pixi.feature.prod.tasks]
start = "gunicorn your_project.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000"
build = "python -m build"
clean = "rm -rf build/ dist/ .pytest_cache/ .ruff_cache/ docs/build/"
# release = { cmd = "python -m twine upload dist/*", depends-on = ["build"] }
release = { cmd = "twine upload dist/*", depends-on = ["build"] }
